/* ------------------------------------------------------------
name: "BLockSquare"
Code generated with Faust 2.20.2 (https://faust.grame.fr)
Compilation options: -lang cpp -scal -ftz 0
------------------------------------------------------------ */

#ifndef  __Square_H__
#define  __Square_H__


#define FAUSTFLOAT iplug::sample

#include "IPlugConstants.h"
#include "IPlugFaust.h"

/* BEGIN AUTO GENERATED BY THE FAUST COMPILER ... */
//#define max std::max
//#define min std::min
#ifndef FAUSTFLOAT
#define FAUSTFLOAT float
#endif 

#include <algorithm>
#include <cmath>
#include <math.h>

const static float fSquareSIG0Wave0[5] = {0.0599999987f,0.119999997f,0.25f,0.5f,0.75f};
class SquareSIG0 {
	
  private:
	
	int fSquareSIG0Wave0_idx;
	
  public:
	
	int getNumInputsSquareSIG0() {
		return 0;
	}
	int getNumOutputsSquareSIG0() {
		return 1;
	}
	int getInputRateSquareSIG0(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	int getOutputRateSquareSIG0(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 0;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	void instanceInitSquareSIG0(int sample_rate) {
		fSquareSIG0Wave0_idx = 0;
	}
	
	void fillSquareSIG0(int count, float* table) {
		for (int i = 0; (i < count); i = (i + 1)) {
			table[i] = fSquareSIG0Wave0[fSquareSIG0Wave0_idx];
			fSquareSIG0Wave0_idx = ((1 + fSquareSIG0Wave0_idx) % 5);
		}
	}

};

static SquareSIG0* newSquareSIG0() { return (SquareSIG0*)new SquareSIG0(); }
static void deleteSquareSIG0(SquareSIG0* dsp) { delete dsp; }

static float Square_faustpower2_f(float value) {
	return (value * value);
}
static float ftbl0SquareSIG0[5];

#ifndef FAUSTCLASS 
#define FAUSTCLASS Square
#endif

#ifdef __APPLE__ 
#define exp10f __exp10f
#define exp10 __exp10
#endif

class Square : public dsp {
	
 private:
	
	int fSampleRate;
	float fConst0;
	float fConst1;
	float fConst2;
	float fConst3;
	FAUSTFLOAT fHslider0;
	float fConst4;
	FAUSTFLOAT fHslider1;
	float fVec0[2];
	int iVec1[2];
	float fConst5;
	float fRec1[2];
	float fVec2[2];
	int IOTA;
	float fVec3[8192];
	float fConst6;
	float fConst7;
	float fRec0[3];
	FAUSTFLOAT fEntry0;
	float fRec2[3];
	
 public:
	
	void metadata(Meta* m) { 
		m->declare("filename", "BLockSquare.dsp");
		m->declare("filters.lib/fir:author", "Julius O. Smith III");
		m->declare("filters.lib/fir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/fir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/iir:author", "Julius O. Smith III");
		m->declare("filters.lib/iir:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/iir:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1", "MIT-style STK-4.3 license");
		m->declare("filters.lib/lowpass0_highpass1:author", "Julius O. Smith III");
		m->declare("filters.lib/lowpass:author", "Julius O. Smith III");
		m->declare("filters.lib/lowpass:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/lowpass:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/name", "Faust Filters Library");
		m->declare("filters.lib/tf2:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2:license", "MIT-style STK-4.3 license");
		m->declare("filters.lib/tf2s:author", "Julius O. Smith III");
		m->declare("filters.lib/tf2s:copyright", "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>");
		m->declare("filters.lib/tf2s:license", "MIT-style STK-4.3 license");
		m->declare("maths.lib/author", "GRAME");
		m->declare("maths.lib/copyright", "GRAME");
		m->declare("maths.lib/license", "LGPL with exception");
		m->declare("maths.lib/name", "Faust Math Library");
		m->declare("maths.lib/version", "2.1");
		m->declare("name", "BLockSquare");
		m->declare("oscillators.lib/name", "Faust Oscillator Library");
		m->declare("oscillators.lib/version", "0.0");
	}

	virtual int getNumInputs() {
		return 0;
	}
	virtual int getNumOutputs() {
		return 1;
	}
	virtual int getInputRate(int channel) {
		int rate;
		switch ((channel)) {
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	virtual int getOutputRate(int channel) {
		int rate;
		switch ((channel)) {
			case 0: {
				rate = 1;
				break;
			}
			default: {
				rate = -1;
				break;
			}
		}
		return rate;
	}
	
	static void classInit(int sample_rate) {
		SquareSIG0* sig0 = newSquareSIG0();
		sig0->instanceInitSquareSIG0(sample_rate);
		sig0->fillSquareSIG0(5, ftbl0SquareSIG0);
		deleteSquareSIG0(sig0);
	}
	
	virtual void instanceConstants(int sample_rate) {
		fSampleRate = sample_rate;
		fConst0 = std::min<float>(192000.0f, std::max<float>(1.0f, float(fSampleRate)));
		fConst1 = std::tan((40840.7031f / fConst0));
		fConst2 = (1.0f / fConst1);
		fConst3 = (1.0f / (((fConst2 + 1.41421354f) / fConst1) + 1.0f));
		fConst4 = (0.25f * fConst0);
		fConst5 = (1.0f / fConst0);
		fConst6 = (((fConst2 + -1.41421354f) / fConst1) + 1.0f);
		fConst7 = (2.0f * (1.0f - (1.0f / Square_faustpower2_f(fConst1))));
	}
	
	virtual void instanceResetUserInterface() {
		fHslider0 = FAUSTFLOAT(0.5f);
		fHslider1 = FAUSTFLOAT(440.0f);
		fEntry0 = FAUSTFLOAT(2.0f);
	}
	
	virtual void instanceClear() {
		for (int l0 = 0; (l0 < 2); l0 = (l0 + 1)) {
			fVec0[l0] = 0.0f;
		}
		for (int l1 = 0; (l1 < 2); l1 = (l1 + 1)) {
			iVec1[l1] = 0;
		}
		for (int l2 = 0; (l2 < 2); l2 = (l2 + 1)) {
			fRec1[l2] = 0.0f;
		}
		for (int l3 = 0; (l3 < 2); l3 = (l3 + 1)) {
			fVec2[l3] = 0.0f;
		}
		IOTA = 0;
		for (int l4 = 0; (l4 < 8192); l4 = (l4 + 1)) {
			fVec3[l4] = 0.0f;
		}
		for (int l5 = 0; (l5 < 3); l5 = (l5 + 1)) {
			fRec0[l5] = 0.0f;
		}
		for (int l6 = 0; (l6 < 3); l6 = (l6 + 1)) {
			fRec2[l6] = 0.0f;
		}
	}
	
	virtual void init(int sample_rate) {
		classInit(sample_rate);
		instanceInit(sample_rate);
	}
	virtual void instanceInit(int sample_rate) {
		instanceConstants(sample_rate);
		instanceResetUserInterface();
		instanceClear();
	}
	
	virtual Square* clone() {
		return new Square();
	}
	
	virtual int getSampleRate() {
		return fSampleRate;
	}
	
	virtual void buildUserInterface(UI* ui_interface) {
		ui_interface->openHorizontalBox("1");
		ui_interface->addNumEntry("PulseWidth", &fEntry0, 2.0f, 0.0f, 5.0f, 1.0f);
		ui_interface->declare(&fHslider1, "unit", "Hz");
		ui_interface->addHorizontalSlider("freq", &fHslider1, 440.0f, 20.0f, 20000.0f, 1.0f);
		ui_interface->addHorizontalSlider("gain", &fHslider0, 0.5f, 0.0f, 1.0f, 0.00999999978f);
		ui_interface->closeBox();
	}
	
	virtual void compute(int count, FAUSTFLOAT** inputs, FAUSTFLOAT** outputs) {
		FAUSTFLOAT* output0 = outputs[0];
		float fSlow0 = (fConst3 * float(fHslider0));
		float fSlow1 = float(fHslider1);
		float fSlow2 = std::max<float>(20.0f, std::fabs(fSlow1));
		float fSlow3 = (fConst4 / fSlow2);
		int iSlow4 = std::max<int>(0, std::min<int>(8191, int(((fConst0 / fSlow1) * ftbl0SquareSIG0[int(float(fEntry0))]))));
		for (int i = 0; (i < count); i = (i + 1)) {
			fVec0[0] = fSlow2;
			iVec1[0] = 1;
			float fTemp0 = (fRec1[1] + (fConst5 * fVec0[1]));
			fRec1[0] = (fTemp0 - std::floor(fTemp0));
			float fTemp1 = Square_faustpower2_f(((2.0f * fRec1[0]) + -1.0f));
			fVec2[0] = fTemp1;
			float fTemp2 = (fSlow3 * (float(iVec1[1]) * (fTemp1 - fVec2[1])));
			fVec3[(IOTA & 8191)] = fTemp2;
			fRec0[0] = (fTemp2 - (fConst3 * ((fConst6 * fRec0[2]) + (fConst7 * fRec0[1]))));
			fRec2[0] = (0.0f - (fVec3[((IOTA - iSlow4) & 8191)] + (fConst3 * ((fConst6 * fRec2[2]) + (fConst7 * fRec2[1])))));
			output0[i] = FAUSTFLOAT((fSlow0 * ((fRec0[2] + (fRec0[0] + (2.0f * fRec0[1]))) + (fRec2[2] + (fRec2[0] + (2.0f * fRec2[1]))))));
			fVec0[1] = fVec0[0];
			iVec1[1] = iVec1[0];
			fRec1[1] = fRec1[0];
			fVec2[1] = fVec2[0];
			IOTA = (IOTA + 1);
			fRec0[2] = fRec0[1];
			fRec0[1] = fRec0[0];
			fRec2[2] = fRec2[1];
			fRec2[1] = fRec2[0];
		}
	}

};
//#undef max
//#undef min
/* ... END AUTO GENERATED BY THE FAUST COMPILER  */
using namespace iplug;

class Faust_Square : public IPlugFaust
{
public:
	Faust_Square(const char* name, const char* inputDSPFile = 0, int nVoices = 1, int rate = 1,
						const char* outputCPPFile = 0, const char* drawPath = 0, const char* libraryPath = FAUST_LIBRARY_PATH)
	: IPlugFaust(name, nVoices)
	{
	}

	void Init() override
	{
		mDSP = std::make_unique<FAUSTCLASS>();
		mDSP->buildUserInterface(this);
		BuildParameterMap();
		mInitialized = true;
	}
};

#undef FAUSTCLASS

#endif
